# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fKSHgdJ1PttlMrCxQbeWg-p5a9k5wvKV
"""

from google.colab import drive
drive.mount('/content/drive')

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import numpy as np
import pandas as pd

data = pd.read_csv('/archive.zip')

X = data['YearsExperience'].values.reshape(-1, 1)
y = data['Salary'].values
plt.scatter(X, y, color='blue', label='Data Points')
plt.title('Years of Experience vs Salary')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.grid(True)
plt.legend()
plt.show()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)


y_pred = model.predict(X)

plt.scatter(X, y, color='blue', label='Data Points')
plt.plot(X, y_pred, color='red', label='Best Fit Line')
plt.title('Years of Experience vs Salary with Best Fit Line')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.grid(True)
plt.legend()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error

data_dict = {
    'Feature1': [1.2, 2.4, 3.5, 4.1, 1.9, 3.7, 2.1, 3.3, 2.8, 4.0],
    'Feature2': [2.3, 1.9, 2.7, 3.0, 2.8, 2.5, 3.2, 2.4, 3.1, 3.3],
    'Feature3': [3.1, 2.8, 1.5, 3.6, 2.5, 1.9, 2.2, 3.0, 1.8, 2.7],
    'Feature4': [4.2, 3.5, 2.9, 4.8, 3.2, 4.0, 4.1, 4.5, 3.6, 4.9],
    'Target': [15.6, 13.1, 12.4, 18.2, 14.1, 16.0, 14.5, 17.3, 14.9, 19.2]
}

df = pd.DataFrame(data_dict)

X = df[['Feature1', 'Feature2', 'Feature3', 'Feature4']]
y = df['Target']

plt.figure(figsize=(12, 8))
for i, feature in enumerate(X.columns):
    plt.subplot(2, 2, i+1)
    plt.scatter(df[feature], y, label=f'{feature} vs Target')
    plt.xlabel(feature)
    plt.ylabel('Target')
    plt.grid(True)
    plt.legend()
plt.tight_layout()
plt.show()

def evaluate_model(test_size):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)

    model = LinearRegression()
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)

    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)

    return mse, mae

mse_20, mae_20 = evaluate_model(0.2)
mse_30, mae_30 = evaluate_model(0.3)

mse_20, mae_20, mse_30, mae_30